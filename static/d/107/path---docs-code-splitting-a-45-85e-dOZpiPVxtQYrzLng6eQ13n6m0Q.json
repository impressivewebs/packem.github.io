{"data":{"site":{"siteMetadata":{"siteUrl":"https://packem.github.io/","title":"Packem - A precompiled ES module bundler","description":"Packem is a compiled ES module bundler and linker."}},"markdownRemark":{"frontmatter":{"title":"Code Splitting","date":null,"date_pretty":null,"path":null,"meta_title":"Packem - Code Splitting","meta_description":"Packem supports splitting of JavaScript modules out of the box using the import() syntax.","image":null,"next":null,"sidebar":"docs","toc":null,"keywords":["chunks","code splitting","splitting"]},"html":"<p>The <code class=\"language-text\">import()</code> ECMAScript proposal by Domenic Denicola allows dynamically loading modules. It is currently in stage 3 of the <a href=\"https://tc39.github.io/process-document/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TC39 process</a>.</p>\n<blockquote>\n<p><strong>Warning</strong>: Support for dynamic imports in Packem using the <code class=\"language-text\">dev-plugin</code> is early. Refer to the issues section of the <a href=\"https://github.com/packem/packem-plugins.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">packem-plugins</code></a> repo.</p>\n</blockquote>\n<h2 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Just use <code class=\"language-text\">import()</code> directly in your code. For example, if you have two modules, <em>A.js</em> and <em>B.js</em>, to dynamically import the latter into the former and log the output, this is how one could accomplish it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// B.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  isAvailable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A.js</span>\n\n<span class=\"token comment\">// Using ES6's Promise API:</span>\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Using `async/await` syntax</span>\n<span class=\"token keyword\">const</span> exportsOfB <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>exportsOfB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"under-the-hood\"><a href=\"#under-the-hood\" aria-label=\"under the hood permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Under the Hood</h2>\n<p>In Packem, a dynamically imported module retains its own sub-graph in the module graph. Hypothetically, a simple interface to represent a chain of dynamic imports would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// In essence, Packem fails without the `root` field being defined</span>\n  <span class=\"token comment\">// in the configuration file.</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Root never exhibits a parent because logically, the main bundle</span>\n    <span class=\"token comment\">// cannot be a dynamic module since that would necessate loading into</span>\n    <span class=\"token comment\">// some script. This is not a bug, but rather intended.</span>\n    bundle_id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// Module `sKAY2qXG` (mangled) is bundled with the root.</span>\n      <span class=\"token string\">\"sKAY2qXG\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// If `bundle_parent` corresponds to `root` then it's a regular module.</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vhjv3jjP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zYqARjUK\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"LPrhSMJz\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b34kURy3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"XnOhbVJ7\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// This is a dynamically imported module that belongs to module</span>\n    <span class=\"token comment\">// `b34kURy3`.</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"b34kURy3\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// Module `sKAY2qXG` (mangled) is bundled with the root.</span>\n      <span class=\"token string\">\"sKAY2qXG\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ModuleGraph<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Before Babel does any transformations, all <code class=\"language-text\">import()</code> statements are replaced with the mangled id. The serializer handles fetching of modules which is where the code splitting issue in <code class=\"language-text\">dev-plugin</code> originates from.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Original TC39 proposal on dynamic imports.</a></li>\n<li><a href=\"http://2ality.com/2017/01/import-operator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Axel Rauschmayer's post on dynamic imports.</a></li>\n</ul>","fields":{"slug":"/docs/code-splitting/"},"timeToRead":2,"excerpt":"The  ECMAScript proposal by Domenic Denicola allows dynamically loading modules. It is currently in stage 3 of the TC39 process.Warning…","fileAbsolutePath":"C:/Users/bukharim96/Desktop/Projects/docs/content/docs/code-splitting.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/code-splitting/"}}