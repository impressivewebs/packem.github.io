{"data":{"site":{"siteMetadata":{"siteUrl":"https://packem.github.io/","title":"Packem - A precompiled ES module bundler","description":"Packem is a compiled ES module bundler and linker."}},"markdownRemark":{"frontmatter":{"title":"The Module Graph","date":null,"date_pretty":null,"path":null,"meta_title":"Packem - The Module Graph","meta_description":"The module graph is a collection of module interfaces in the logical context that connects the source code to its final output.","image":null,"next":null,"sidebar":"docs","toc":null,"keywords":["module","modules","module graph"]},"html":"<p>The module graph is a collection of module interfaces in the logical context that connects the source code to its final output.</p>\n<p>Using a tree to define a module graph is a pain point since a single mutation would require a visitor to traverse the branches just to reach a certain module. If two or more modules require each other, things become more difficult. Controlling duplication across branches is a burden.</p>\n<p>If watch mode is enabled in <code class=\"language-text\">@packem/dev-plugin</code>, a deletion(s) can cause module(s) not to be removed from the module graph (<em>dangled modules</em>) and vice versa. So how should references be managed? All of these manipulations from the RC makes it even worse as they destroy <em>referential integrity</em>. No matter how much prettifiers and linters you happen to make use of, if you don't practice proper coding techniques, you would end up with unexpected results.</p>\n<p>With this in mind, this approach caused a major shift in Packem's architecture. The module graph being refactored into a flat list containing extended module interfaces is profoundly easier to maintain, making issues like duplication, circular dependencies and code splitting a breeze. This is what a module graph as a flat list appears like during build time:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"b34kURy3\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ModuleGraph<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As much as using functional patterns to update the module graph might prove useful, it is a huge leap into anti-performance. The general principle of Packem favors <em>performance over expression</em> without selling away features.</p>","fields":{"slug":"/docs/module-graph/"},"timeToRead":1,"excerpt":"The module graph is a collection of module interfaces in the logical context that connects the source code to its final output.Using a treeâ€¦","fileAbsolutePath":"C:/Users/bukharim96/Desktop/Projects/docs/content/docs/module-graph.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/module-graph/"}}