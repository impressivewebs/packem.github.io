{"data":{"markdownRemark":{"html":"<p>This section covers all the nitty gritty details of creating Packem plugins to the extent of being able to create custom events to allow plugins to hook onto during compile time using the <code class=\"gatsby-code-text\">PackemEventDispatcher</code>.</p>\n<p>Packem’s plugins follow a general procedure. You’ll need to understand all the plugin rules that you need to conform to before being able to carry on with this section.</p>\n<h2 id=\"general-plugin-rules\"><a href=\"#general-plugin-rules\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General Plugin Rules</h2>\n<p>There are a few procedures that one needs to take into account to <strong>create</strong>, <strong>publish</strong> and <strong>use</strong> a plugin(s):</p>\n<ul>\n<li>\n<p>Your plugin’s package name (i.e. in the <code class=\"gatsby-code-text\">package.json</code>) must be in the form <code class=\"gatsby-code-text\">packem-&lt;name&gt;-plugin</code> where <code class=\"gatsby-code-text\">&lt;name&gt;</code> (without the angle brackets) is your plugin name.</p>\n</li>\n<li>\n<p>Your package must export <strong>ONLY ONE</strong> class that extends <code class=\"gatsby-code-text\">PackemPlugin</code>.</p>\n</li>\n<li>\n<p>All plugins fall under the <code class=\"gatsby-code-text\">plugins</code> field in the config, relative to <code class=\"gatsby-code-text\">root</code>, <code class=\"gatsby-code-text\">output</code> and <code class=\"gatsby-code-text\">transformer</code>.</p>\n</li>\n<li>\n<p>If a plugin is defined in the config <em>and is listed to be a common plugin</em>, it must follow the format <code class=\"gatsby-code-text\">&lt;name&gt;-plugin</code>. A common plugin is any plugin under the packem scope on npm like <code class=\"gatsby-code-text\">@packem/dev-plugin</code>, <code class=\"gatsby-code-text\">@packem/file-plugin</code>. You can find more about common plugins <a href=\"https://github.com/packem/packem/blob/master/docs/common-plugins.md\">here</a>.</p>\n</li>\n<li>\n<p>If a plugin is defined in the config <em>and is custom</em>, it must follow the format <code class=\"gatsby-code-text\">packem-&lt;name&gt;-plugin</code>. Packem can pick this from your plugin’s <code class=\"gatsby-code-text\">package.json</code>. This means your plugin’s class doesn’t need to follow any format so this is fine.</p>\n<p><code class=\"gatsby-code-text\">module.exports = class FunkyApple extends PackemPlugin {}</code></p>\n</li>\n<li>\n<p>A correctly defined plugin has access to any option(s) passed to it via using <code class=\"gatsby-code-text\">this.pluginConfig</code> (a prototype property available for every plugin). For example, if you pass an option <code class=\"gatsby-code-text\">isCool: true</code> to the plugin, you can refer to it by using <code class=\"gatsby-code-text\">this.pluginConfig</code> anywhere in your plugin’s class whereby it returns an object.</p>\n</li>\n<li>\n<p>If no options are to be passed to a plugin, you must indicate that it is available so that the object notion is not broken. A YAML-compliant truthy boolean is preferable, particularly <code class=\"gatsby-code-text\">on</code>. Other truthy booleans include <code class=\"gatsby-code-text\">ON</code>, <code class=\"gatsby-code-text\">yes</code> and <code class=\"gatsby-code-text\">YES</code>, <code class=\"gatsby-code-text\">true</code> and <code class=\"gatsby-code-text\">TRUE</code>. For example, <code class=\"gatsby-code-text\">packem-custom-addon-plugin: on</code> is correct.</p>\n</li>\n<li>\n<p><strong>Plugins are executed in order of definition (FIFO — First In, First Out)</strong>. Other bundlers like webpack would pipe several loaders but Packem decided to execute plugins in order of definition to make configuring much less of a pain.</p>\n</li>\n</ul>\n<h2 id=\"module-interfaces\"><a href=\"#module-interfaces\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module Interfaces</h2>\n<p>We’ve dealt with event hooks and successfully used the right event to do what we needed. But what is a module interface anyway?</p>\n<p><strong>A module interface is an exact in-memory copy of a mutable reference of a module from the module graph available from the LC/RC</strong>. Note that this reference doesn’t affect the filesystem i.e. it is <em>read-only</em> and just points to a file. Just like an OS can display file metadata, Packem provides metadata for modules in the module graph as module interfaces. Not all properties can be satisfied for all files like JavaScript vs non-JavaScript file types. A module interface is always in this form:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ModuleInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The mangled ID used to refer to this module.</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The absolute path of this module.</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// A tracker that defines whether this module is dynamic or not.</span>\n  <span class=\"token comment\">// If it is equivalent to \"root\", then it is not dynamic. Otherwise, it is.</span>\n  <span class=\"token comment\">// </span>\n  <span class=\"token comment\">// Quick Hack: To check if a module is dynamically imported anywhere,</span>\n  <span class=\"token comment\">// </span>\n  <span class=\"token comment\">//    onModuleBundle(mod: ModuleInterface) {</span>\n  <span class=\"token comment\">//       let isDynamicModule: boolean = mod.bundle_id !== \"root\";</span>\n  <span class=\"token comment\">//       // Do something with `isDynamicModule`</span>\n  <span class=\"token comment\">//    }</span>\n  <span class=\"token comment\">// </span>\n  bundle_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The file extension of this module.</span>\n  extension<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Content of this module which doesn't exist on non-JavaScript</span>\n  <span class=\"token comment\">// files so don't use it if you're matching a non-text-based file type.</span>\n  content<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// An array of mangled IDs that represent a module on the flat list</span>\n  <span class=\"token comment\">// module graph. When bundling this module with its dependencies it</span>\n  <span class=\"token comment\">// is recursively looped over until all its dependency's sub-dependencies</span>\n  <span class=\"token comment\">// have been exhaustively transformed then taken to the serializer (when</span>\n  <span class=\"token comment\">// the same happens to the whole module graph).</span>\n  dependencies<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"mutations-dangling-modules-and-the-flat-list-module-graph\"><a href=\"#mutations-dangling-modules-and-the-flat-list-module-graph\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutations, Dangling Modules and the Flat List Module Graph</h2>\n<blockquote>\n<p>.</p>\n<p>“With great performance comes great responsibility” — Packem™.</p>\n</blockquote>\n<p>Using a tree to define a module graph is a pain point since a single mutation would require a visitor to traverse the branches just to reach a certain module. If two or more modules require each other, things become more difficult. Controlling duplication across branches is a burden.</p>\n<p>If watch mode is enabled in <code class=\"gatsby-code-text\">@packem/dev-plugin</code>, a deletion(s) can cause module(s) not to be removed from the module graph (<em>dangled modules</em>) and vice versa. So how should things be managed? All of these manipulations from the runtime context makes it even unbearable.</p>\n<p>This approach caused a major shift in Packem’s architecture. The module graph being refactored into a flat list containing extended module interfaces is found to be easier to maintain, making issues like duplication, inter-modular/circular dependencies and code splitting a breeze. This is what a module graph as a flat list appears like during build time:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"b34kURy3\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ModuleGraph<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As much as using functional patterns to update the module graph may seem <em>cute</em>, it is a huge leap into anti-performance. The general principle of Packem favors <em>performance over expression</em> without selling away features.</p>\n<h2 id=\"built-in-events\"><a href=\"#built-in-events\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in events</h2>\n<p>Here’s a list of all the built-in plugin events in order of dispatch right from the beginning of the bundling cycle till the very end.</p>\n<h3 id=\"onstart\"><a href=\"#onstart\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onStart</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">ConfigurationObject</code>.</p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>This event is dispatched before the module graph is generated.</p>\n<h4 id=\"the-configurationobject\"><a href=\"#the-configurationobject\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"gatsby-code-text\">ConfigurationObject</code></h4>\n<p>The configuration object is a slightly modified version of <code class=\"gatsby-code-text\">packem.config.yml</code>. It includes a few extra fields.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConfigurationObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The root module is where the resolver starts to track</span>\n  <span class=\"token comment\">// dependencies and rehydrate them into the module graph.</span>\n  root<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Output bundle generated by the transformer.</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Absolute path to the root module.</span>\n  rootPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Absolute path to the output bundle.</span>\n  outputPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Absolute path to the output bundle's directory.</span>\n  <span class=\"token comment\">// If the output path is `./dist/bundle.js`, the equivalent</span>\n  <span class=\"token comment\">// `outputDir` would be the absolute path prepended to `./dist/` only.</span>\n  outputDir<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Output path file name without extension.</span>\n  <span class=\"token comment\">// If the output directory is `./dist/bundle.main.js`, then</span>\n  <span class=\"token comment\">// the equivalent `outputPathFileStem` would be `bundle.main`</span>\n  <span class=\"token comment\">// i.e. without `.js`.</span>\n  outputPathFileStem<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">:</span> ConfigurationObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Logs configuration file to stdout.</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"ongeneratemodulegraph\"><a href=\"#ongeneratemodulegraph\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onGenerateModuleGraph</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">ModuleGraph</code>.</p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>Allows manipulation of the graph before <code class=\"gatsby-code-text\">onModuleBundle</code>. This method is especially useful when you wish to reset all module interfaces in a graph to fit your needs after which you could use <code class=\"gatsby-code-text\">onModuleBundle</code> to get your customized version of the graph.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onGenerateModuleGraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">graph<span class=\"token punctuation\">:</span> ModuleGraph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear all dependencies before you call `onModuleBundle`.</span>\n  graph<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"onmodulebundle\"><a href=\"#onmodulebundle\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onModuleBundle</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">ModuleInterface</code></p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">string</code> Overriden content of the current module. If you need a module to export the return value prepend your return value with the string <code class=\"gatsby-code-text\">&quot;module.exports = &quot;</code>.</p>\n<p>One of the most commonly used events. Fires when the transformer is running through the module graph in the runtime context. It gives access to the module interface of every module in the graph.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onModuleBundle</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">:</span> ModuleInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"module.exports = \"</span> <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"onbeforetransform\"><a href=\"#onbeforetransform\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onBeforeTransform</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">ModuleInterface</code></p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>Triggered just before the transformer kicks in. If you wish to run something before a Babel preset(s) and/or plugin(s) is included use this event.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onBeforeTransform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod<span class=\"token punctuation\">:</span> ModuleInterface</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something before any Babel preset(s) and/or plugin(s)</span>\n  <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"onaftertransform\"><a href=\"#onaftertransform\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onAfterTransform</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">transformedCode: string</code>. A transformed version of the input files.</p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>Triggered just after the transformer handles JavaScript file types. Useful when you want to run something after a script is transformed.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onAfterTransform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">transformedCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Access to transformed code i.e. transformer's output.</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transformedCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"onsuccess\"><a href=\"#onsuccess\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onSuccess</code></h3>\n<p><strong>Parameters:</strong> None.</p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>This event is dispatched when the bundling cycle is successfully complete.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully bundled everything! 👌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"onend\"><a href=\"#onend\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">onEnd</code></h3>\n<p><strong>Parameters:</strong> <code class=\"gatsby-code-text\">config: ConfigurationObject</code>. A transformed version of <code class=\"gatsby-code-text\">packem.config.yml</code> exhibiting <a href=\"https://github.com/packem/packem/blob/master/docs/the-plugin-system.md#the-configurationobject\">this format</a>.</p>\n<p><strong>Returns:</strong> <code class=\"gatsby-code-text\">void</code>.</p>\n<p>After every core process is complete, this event is dispatched.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token function\">onEnd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">:</span> ConfigurationObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// All core process are complete. Only plugins or child</span>\n  <span class=\"token comment\">// processes are expected to be running.</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"resources\"><a href=\"#resources\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<ul>\n<li><a href=\"https://github.com/packem/packem\">Packem: Under the Hood.</a></li>\n<li><a href=\"https://github.com/packem/packem-plugins\">Packem Common Plugins.</a></li>\n</ul>\n<p>If you happen to fall into any issue, got lost somewhere in the docs, please report to us how we can update the docs to make it easier for readers. Alternatively, you can contribute to Packem’s docs by submitting a PR or filing an issue with the <code class=\"gatsby-code-text\">documentation</code> tag/filter.</p>","frontmatter":{"title":"Advanced Plugin APIs","next":null},"fields":{"path":"content\\docs\\advanced-plugin-apis.md","slug":"docs/advanced-plugin-apis.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"docs/advanced-plugin-apis.html"}}