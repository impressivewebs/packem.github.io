{"data":{"examples":{"edges":[{"node":{"fileAbsolutePath":"C:/Users/user/Desktop/Projects/packem.github.io/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"A Simple Component","domid":"hello-example"},"html":"<p>React components implement a <code class=\"gatsby-code-text\">render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code class=\"gatsby-code-text\">render()</code> via <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX is optional and not required to use React.</strong> Try the <a href=\"babel://es5-syntax-example\">Babel REPL</a> to see the raw JavaScript code produced by the JSX compilation step.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/user/Desktop/Projects/packem.github.io/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"A Stateful Component","domid":"timer-example"},"html":"<p>In addition to taking input data (accessed via <code class=\"gatsby-code-text\">this.props</code>), a component can maintain internal state data (accessed via <code class=\"gatsby-code-text\">this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code class=\"gatsby-code-text\">render()</code>.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/user/Desktop/Projects/packem.github.io/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"An Application","domid":"todos-example"},"html":"<p>Using <code class=\"gatsby-code-text\">props</code> and <code class=\"gatsby-code-text\">state</code>, we can put together a small Todo application. This example uses <code class=\"gatsby-code-text\">state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/user/Desktop/Projects/packem.github.io/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"A Component Using External Plugins","domid":"markdown-example"},"html":"<p>React allows you to interface with other libraries and frameworks. This example uses <strong>remarkable</strong>, an external Markdown library, to convert the <code class=\"gatsby-code-text\">&lt;textarea&gt;</code>’s value in real time.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"Absolutely Fast"},"html":"<p>Packem is <strong>+2X faster than Parcel (with multicore compilation)</strong>. It leverages close-to-the-metal Rust bindings to achieve zero-cost abstractions and fearless concurrency. The <a href=\"http://localhost:8000/docs/bundling-contexts.html\">RC</a> relies on V8’s <code class=\"gatsby-code-text\">JSON.parse()</code> for faster parsing of larger module graphs.</p>"}},{"node":{"frontmatter":{"title":"Safe Binaries"},"html":"<p>Packem is precompiled into safe and efficient binaries. The upcoming <em>v1.0-stable</em> is expected to implement most parts of the RC in shared Rust libraries, hence improved speeds.</p>"}},{"node":{"frontmatter":{"title":"Versatile Plugin System"},"html":"<p>A comprehensive class-based approach is used to instantiate and rehydrate plugins into the bundling cycle. The <code class=\"gatsby-code-text\">PackemEventDispatcher</code> API can be used to manage internal event hooks and create custom events during build time.</p>"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}