{"data":{"markdownRemark":{"html":"<p>The module graph is a collection of module interfaces in the logical context that connects the source code to its final output.</p>\n<p>Using a tree to define a module graph is a pain point since a single mutation would require a visitor to traverse the branches just to reach a certain module. If two or more modules require each other, things become more difficult. Controlling duplication across branches is a burden.</p>\n<p>If watch mode is enabled in <code class=\"gatsby-code-text\">@packem/dev-plugin</code>, a deletion(s) can cause module(s) not to be removed from the module graph (<em>dangled modules</em>) and vice versa. So how should things be managed? All of these manipulations from the runtime context makes it even unbearable.</p>\n<p>This approach caused a major shift in Packemâ€™s architecture. The module graph being refactored into a flat list containing extended module interfaces is found to be easier to maintain, making issues like duplication, circular dependencies and code splitting a breeze. This is what a module graph as a flat list appears like during build time:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"yFj2CkjK\"</span><span class=\"token punctuation\">,</span>\n    bundle_parent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"b34kURy3\"</span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sKAY2qXG\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ModuleGraph<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As much as using functional patterns to update the module graph might prove useful, it is a huge leap into anti-performance. The general principle of Packem favors <em>performance over expression</em> without selling away features.</p>","frontmatter":{"title":"The Module Graph","next":"atomic-modules.html"},"fields":{"path":"content\\docs\\the-module-graph.md","slug":"docs/the-module-graph.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"docs/the-module-graph.html"}}